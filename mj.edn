#mj {:project #include "project.edn"
     :targets
     #merge
     [#default-targets [:pom :clean :jar :deploy]
      {:thin-pom {:doc       "Pom file for the thin jar.",
                  :invoker   :clojure,
                  :deps      {org.hugoduncan/makejack.tools
                              {:mvn/version "0.0.1-alpha1"}},
                  :main      makejack.tools.pom,
                  :main-args ["--profile" ":thin"]}
       :thin-jar {:doc       "Build a thin jar, ",
                  :invoker   :babashka,
                  :deps      {org.hugoduncan/makejack.tools
                              {:mvn/version "0.0.1-alpha1"}},
                  :main      makejack.tools.jar,
                  :main-args ["--profile" ":thin"]}
       :jars     {:invoker :chain
                  :targets [:thin-pom :thin-jar :pom :jar]}
       :lint     {:invoker :shell
                  :args    ["clj-kondo" "--lint" "src"]}
       :fmt      {:invoker   :clojure
                  :deps      {cljfmt {:mvn/version "0.6.4"}}
                  :main      cljfmt.main
                  :main-args ["check"]
                  :options   {:out             :inherit
                              :forward-options false}}
       :api-doc  {:doc     "Generate API documentation from sources."
                  :invoker :clojure
                  :aliases [:clj-xchart :test.check]
                  :deps    {codox {:mvn/version "0.10.6"}}
                  :options {:forward-options false
                            :out             :inherit}
                  :expr    (do (require '[codox.main :as codox])
                               (codox/generate-docs
                                 {:metadata    {:doc/format :markdown}
                                  :output-path "doc/0.5/api"
                                  :source-uri  "https://github.com/hugoduncan/criterium/blob/{version}/{filepath}#L{line}"
                                  :version     #ref [:project :version]}))}
       :publish {:invoker :shell
                 :args    ["emacsclient"
                           "--eval"
                           #join [
                                  "(progn (load \""
                                  #ref [:project-root]
                                  "/doc-src/publish.el\") (org-publish-all))"]]
                 :options {:out :inherit}}

       :test     {:doc     "Run tests"
                  :invoker :clojure
                  :deps    {lambdaisland/kaocha           {:mvn/version "1.0.641"}
                            lambdaisland/kaocha-cloverage {:mvn/version "1.0-45"}}
                  :aliases [:clj-xchart :test.check]
                  :main    "kaocha.runner"
                  :options {:out             :inherit
                            :forward-options false}}}]}
